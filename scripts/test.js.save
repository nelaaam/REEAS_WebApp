const calculator = require('../scripts/calculator');

const raw_data = [
    [6285, 7987, 8764, 8245, 6031, 3358, 2183, -595, -2810, 2289, -1751, 781, 3771, 4912, 7152, 9175, 7692, 5726, 6163, 5995, 3747, 1674, 1096, 1472, 2196, 3604, 5819, 5826, 2452, 1189, 2371, 1842, 2041, 4090, 4996, 4194, 3420, 4631, 5034, 4046, 4816, 4362, 2571, 1540, 378, -177, -175, -272, 613, 4841],
    [-317378, -317456, -317513, -317582, -317584, -317633, -317869, -318160, -318306, -318277, -318216, -318111, -317789, -317286, -316874, -316499, -315980, -315461, -314944, -314522, -314082, -313421, -312611, -311706, -310868, -310080, -309372, -308692, -308019, -307479, -307050, -306795, -306691, -306800, -307097, -307600, -308462, -309558, -310946, -312639, -314529, -316737, -319190, -321770, -324497, -327358, -330267, -333177, -336216, -339338],
    [-8312, -8110, -7814, -7469, -7189, -6821, -6455, -6120, -5804, -5553, -5381, -5247, -5114, -5039, -5028, -5004, -4944, -4876, -4720, -4491, -4215, -3792, -3135, -2306, -1399, -111, 1250, 2768, 4765, 6738, 9146, 11871, 14795, 18266, 21891, 25875, 29973, 34132, 38322, 42152, 45879, 49279, 52399, 55193, 57477, 59395, 60743, 61727, 62441, 62610],
    [-1175731, -1097040, -1022043, -951045, -875279, -799980, -728308, -668041, -631437, -616148, -615778, -617360, -597147, -541619, -451972, -336239, -215448, -118472, -77263, -111171, -216692, -391157, -627906, -898425, -1168007, -1414606, -1620765, -1763112, -1830020, -1828876, -1765225, -1657505, -1541732, -1441221, -1381683, -1390540, -1473275, -1619388, -1809577, -2017075, -2207845, -2355211, -2438217, -2435722, -2348640, -2191448, -1973059, -1708755, -1423074, -1132628],
    [-264442, -264946, -264911, -264543, -264091, -263558, -262908, -262214, -261409, -260430, -259340, -258301, -257473, -256694, -255753, -254722, -253565, -252243, -250855, -249469, -248097, -246878, -246015, -245485, -245152, -244905, -244839, -245072, -245580, -246121, -246585, -247290, -248177, -248957, -249745, -250897, -252572, -254668, -257036, -259463, -261799, -263980, -265918, -267584, -269006, -270205, -271269, -272262, -273124, -2738810],
    [2532, 2472, 2380, 2257, 2148, 2064, 1959, 1883, 1745, 1582, 1476, 1285, 1156, 984, 855, 755, 555, 422, 279, 134, 18, -122, -269, -343, -432, -447, -372, -321, -211, -125, 67, 262, 401, 647, 889, 1132, 1378, 1626, 1900, 2163, 2401, 2623, 2768, 2958, 3175, 3313, 3476, 3590, 3788, 3993]
];
const raw_timestamp = [
    ["2019-03-08T15:07:04.019538Z", "2019-03-08T15:08:03.994538Z"],
    ["2019-03-08T15:09:47.019538Z", "2019-03-08T15:12:34.969538Z"],
    ["2019-03-08T15:10:20.019538Z", "2019-03-08T15:13:39.969538Z"]
];
const stations = [
    [7.07, 125.58],
    [24.97, 121.50],
    [19.03, 109.84]
];

console.log(raw_timestamp[0][0], raw_timestamp[0][1]);
var PGDs = [], ATs = [], AT = [], distance = [];

//INTEGRATION
for (var i = 0; i < 6; i++) {
    PGDs[i] = calculator.integrateVelocity(raw_data[i]);
}
//PGA
const PGD = Math.max(PGDs);
//GET S-P
for (var i = 0; i < 3; i++) {
    ATs.push(getTimeFrTimestamp(raw_timestamp[i][0], getTimeFrTimestamp[i][1]));
    AT[i] = calculator.getDiffInSeconds(ATs[i][1], ATs[i][0]);
    distance[i] = calculator.getSensorDistance(AT[i]);
    ML[i] = calculator.getMagnitude(PGD, distance[i]);
}

var epicenter = calculator.trilaterate(station[0], station[1], station[2], distance);

function getTimeFrTimestamp(timestamp) {
    date = new Date(timestamp);
    time = date.getTime();
    return time;
}


console.log("PGDs = " + PGDs);
console.log("PGD = " + PGD);
console.log("ATs = " + ATs);
console.log("Station Distances = " + distances);
console.log("MLs = " + ML);
console.log("Epicenter = " + epicenter);
